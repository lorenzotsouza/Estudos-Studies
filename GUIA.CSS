// No css o comentário é da seguinte forma:
/* aqui dentro está comentado */

// Para selecionarmos o id utilizamos # antes do nome no CSS.
#topo = irá selecionar o id topo no arquivo HTML.

// Para selecionarmos a classe utilizamos . antes do nome no CSS.
.base = irá selecionar a classe base no arquivo HTML

// Para selecionarmos todo o arquivo HTML, utilizamos *.

// Para selecionar uma propriedade comum, somente utilizamos o nome.
h1 {
    aqui dentro irá a alteração visual do bloco h1.
}

// Para agrupar propriedades utilizamos a vírgula.
h1, h2, h3 {
    aqui dentro irá a alteração visual das propriedades selecionadas.
}

// CSS inline é o CSS colocado direto no arquivo HTML.
<h1 style="color: blue"> aqui ficou azul </h1>
// Também pode ser criado uma tag style dentro do HTML.
<style> 
h1 {
    color: blue;
}
</style>
// Tudo dentro do h1 ficará azul.

// CSS como arquivo próprio deve ser linkado no arquivo HTML com a seguinte linha:
<link rel="stylesheet" href="style.css">

// Em questão de força do CSS sobre o HTML, a seguinte ordem se aplica:
1. Inline = <h1 style="color: red"> Cor </h1>.
2. Interno = A tag style acima do arquivo com as edições visuais.
3. Externo = O arquivo CSS.

// Em questão de força no arquivo externo de CSS, a seguinte ordem se aplica:
1. Inline = <h1 style="color: blue"> Azul </h1>
2. ID = (arquivo HTML) id=azul, CSS #azul
3. Classe = (arquivo HTML) class=azul, CSS .azul
4. Elemento = h1, div e etc...
5. Universal = *

// At-rules, são comportamentos no arquivo CSS, exemplo:
/*
@import - incluir CSS externo.
@media - regras para dispositivos móveis.
@font-face - fontes externas.
@keyframes - animações.
*/

// Shorthand é a uma forma de organizar a edição visual de um modo que fique,
// melhor de ser visualizado e menos poluído. Exemplo:
Código normal de um background:
/*
background-color: #000;
background-image: url(images/image.png);
background-repeat: no-repeat;
background-position: left-top;
*/
Código shorthand:
/*
background: #000 url(images/image.png) no-repeat left-top;
*/
Código normal de uma fonte:
/*
font-style: italic;
font-weight: bold;
font-size: 10px;
line-height: 1.3;
font-family: Arial, sans-serif;
*/
Código shorthand:
/*
font: italic bold 10px/1.3 Arial, sans-serif;
*/

// Tipos numéricos:
<integer> = Números inteiros, -10 ou 300.
<number> = Número decimal, 2.4, 64 ou 0.234.
<dimension> = Números com unidades juntos, 90deg, 2s ou 8px.
<porcentagem> = Representa uma fração: 50%.
// Unidades comuns:
<length> = Representa um valor de distância: px, em, vw.
<angle> = Representa um ângulo: deg, rad, turn.
<time> = Representa um tempo: s, ms.
<resolution> = Representa resoluções para os dispositivos: dpi.

// Distâncias absolutas:
Unidade     Nome                Equivalência
cm          Centímetros         1cm = 96px = 2.54
in          Inches(polegadas)   1in = 2.54 = 96px
px          Pixels              1px = 1/96th of 1in

// Distâncias relativas:
Unidade     Relativo a
em          Tamanho da font do pai.
rem         Tamanho da font do elemento raiz (root/html).
vw          1% da viewport width.
vh          1% da viewport height.

// Inserir string no CSS:
.box::after {
    content: "Aqui será inserido texto";
    color: white;
}

// Box model.
Tamanho (largura x altura) - width | height
Conteúdo - content
Bordas - border
Preenchimento interno - padding
Espaços fora da caixa - margin

// Box sizing.
content-box                    | border-box
A caixa é medida pelo conteúdo | A caixa é medida pelas bordas.

// Display block ou inline.
Block                                             | Inline
ocupa toda a linha, o próximo elemento vem abaixo | elemento fica ao lado do outro
width e height são respeitados                    | width e height não funcionam
padding, margin e border funcionam normalmente    | somente valores horizontais de padding, margin e border

// Margens.
margin - podem ser utilizadas medidas de px, em, %, top, left, bottom, right e auto.
a ordem no código é top, left+right, bottom.

// Preenchimento.
padding - podem ser utilizados medidas de px, em, %, top, left, bottom, right e auto.
a ordem no código é top, left+right, bottom.
cuidado ao mexer no padding, ele pode alterar a largura do desenho.

// Bordas.
border (e outline) - controla as bordas das box criadas, podem ser utilizadas medidas de:
px, em, %, top, left, bottom, right e auto.
o style da borda pode ser: solid | dotted | dashed | double | groove | ridge | inset | outset

// Cores.
as cores podem ser inseridas com o nome (inglês), valor hexadecimal, RGB(A) e HSL(A). Exemplo:
/*h1 {
    color: blue;
    color: #0000FF;
    color: rgb(0, 0, 255);
    color: hsl(240, 100%, 50%);
}*/
podemos adicionar transparência no RGB(A) e no HSL(A), com uma quarta casa em valor decimal ou porcento.

// Valores globais para referência.
/*h1 {
    color: inherit; - irá herdar a cor do elemento anterior.
    color: initial; - volta a cor inicial.
    color: unset; - não há cor definida.
}*/

// 