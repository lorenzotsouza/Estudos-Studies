// Conecta um elemento HTML com o CSS a fim de alterar o elemento.

// Tipos:

// Element Selector
Seleciona o elemento HTML para ser alterado.

EXEMPLO:
<h1> Título da página </h1>
<p> Conteúdo da minha página </p>

h1 {
	color: blue;
	font-size: 60px;
}

p {
	color: green;
}

// ID Selector
Um elemento que tenha um atributo id. Cada id tem que ser único.
Usa-se # para indicar um ID selector.

EXEMPLO:
<h1 id="title">Título da página</h1>
<p id="content">Conteúdo da minha página</p>

#title {
  color: yellow;
}

#content {
	color: orange;
}

// Class Selector
Os elementos com atributo class podem ter uma ou mais classes.
Usa-se . para indicar um class selector.
Todos os elementos com a mesma class são alterados.

EXEMPLO:
<h1 class="red big">Título da página</h1>
<p class="red big">Conteúdo da minha página</p>

.red {
color: red;
}

.big {
	font-size: 3em;
}

// Attribute Selector
Um elemento que tenha um atributo específico é selecionado.

EXEMPLO:
<h1 title="Algum titlulo">Título da página</h1>
<p title="Conteúdo da página">Conteúdo da minha página</p>

[title] {
	color: orange;
}

// Pseudo-class Selector
Elementos em um estado específico são selecionados.

EXEMPLO:
<h1 class="red big">Título da página</h1>
<p class="red big">Conteúdo da minha página</p>

p:hover {
	color: red;
}

h1:hover {
	color: red;
}

// Múltiplos
É possível selecionar múltiplos elementos e aplicar alguma regra CSS para todos eles.
Usamos uma separação por vírgulas para isso.

EXEMPLO:
h1, p, .title, .title:hover {
	color: red;
}

// Combinadores
Eles trabalham para buscar e combinar seletores a fim de aplicar uma estilização.

// Descendant combinator
Identificado por um espaço entre os seletores.
Busca um elemento dentro de outro, mesmo que existam outros elementos no caminho.

EXEMPLO:
<body>
	<article>
		<h2>Um Título</h2>
	</article>
</body>

body article h2 {
	color: red;
}

// Child combinator
Identificado pelo sinal > entre dois seletores.
Seleciona somente o elemento que é filho direto do pai.
Elementos depois do filho direto serão desconsiderados.

EXEMPLO:
<body>
  <ul>
    <li>Item 1</li>
    <ul>
      <li>Item 2</li>
    </ul>
  </ul>
</body>

body > ul > li {
	color: blue;
}

// Adjacent sibling combinator
Identificado pelo sinal + entre dois seletores.
Seleciona somente o elemento do lado direito que é irmão direto na hierarquia.

EXEMPLO:
<h1>
  Título
</h1>
<p>
  Esse é um parágrafo
</p>
<p>
  Mais um parágrafo
</p>

h1 + p {
	color: red;
}

// General sibling combinator
Identificado pelo sinal ~ entre dois seletores.
Seleciona todos os elementos irmãos.

EXEMPLO:
<h1>
  Título
</h1>
<p>
  Esse é um parágrafo
</p>
<p>
  Mais um parágrafo
</p>

h1 ~ p {
	color: red;
}

// Pseudo-classes
É um tipo de seletor que irá selecionar um elemento que estiver em um estado específico.

// First-child
É quando queremos selecionar o primeiro filho de um grupo de elementos.

EXEMPLO:
<ul>
  <li>Gratidão</li>
  <li>Esperança</li>
  <li>Fé</li>
</ul>

ul li:first-child {
  font-weight: bold;

// Nth-of-type
Pega o elemento por tipo e posição.

EXEMPLO:
<ul>
  <h3>Palavras bonitas</h3>
  <li>Gratidão</li>
  <li>Esperança</li>
  <li>Fé</li>
</ul>

ul li:nth-of-type(1) {
  font-weight: bold;
}

// Nth-child
É quando queremos selecionar o primeiro filho de um grupo de elementos.

EXEMPLO:
<ul>
	<h3>Palavras bonitas</h3>
  <li>Gratidão</li>
  <li>Esperança</li>
  <li>Fé</li>
</ul>

ul li:nth-child(2) {
  font-weight: bold;
}

// Nth-child(odd) e Nth-child(even)
Even - números pares
Odd - números ímpares

EXEMPLO:
<ul>
  <li>Gratidão</li>
  <li>Esperança</li>
  <li>Fé</li>
  <li>Liberdade</li>
</ul>

ul li:nth-child(odd/even) {
  color: gray;
}

// Ações do usuário
Algumas estilos só são aplicados quando o usuário faz alguma ação na página.
Hover - passar o mouse por cima.
Focus - clicar em campos de digitação.

EXEMPLO:
hover
a:hover {
  color: red;
}

focus
input:focus {
  border-color: red;
}

// Disabled e required
Disabled - desabilita o atributo.
Required - obriga o uso do atributo.

EXEMPLO:
disabled
<input type="text" disabled>

input:disabled {
  background-color: green;
}

required
<input type="text" required>

input:required {
  background-color: red;
}

// Pseudo-elements
Com pseudo-elements nós podemos adicionar elementos HTML pelo próprio CSS.

// pseudo-element-name
Tanto para o before quanto para o after é preciso adicionar o content,
mesmo que ele seja vazio (content = "";).
before - adiciona um pseudo-elemento antes do elemento selecionado.
after - adiciona um pseudo-elemento depois do elemento selecionado.
first-line - pega a primeira linha de um texto.

EXEMPLO:
before
<ul>
  <li>Gratidão</li>
  <li>Esperança</li>
  <li>Fé</li>
  <li>Liberdade</li>
</ul>

li::before {
  content: "> "
}

after
li::after{
  content: ";"
}

p::first-line {
	font-weight: bold;
}

// Layout e evolução

// Normal Flow
É a maneira que o block e o inline são organizados na página.

EXEMPLO
<p> Texto block com <strong> inline </strong> </p>

// Tabless
Uso das propriedades float e clear para que os elementos possam mudar de posição na tela.
float left - fixa na esquerda.
float right - fixa na direita.
clear:both - volta ao estado normal.

EXEMPLO:
<div style="float: left/right OU clear:both"
  esquerda/direita/normal
</div>

// Flex container
Uma classe container com items dentro, os flex items.
Nesting - é o conceito de um elemento que contém outros elementos.
Axis - main e cross / star e end.
Flex sizing - altera o width/height dos itens para preencher os espaços do flex container.
Flex direction - altera a dimensão (horizontal o vertical), valores: row|row-reverse|column|column-reverse.
Flex wrap - cria novas linhas.
Flex flow - shorthand para o direction e wrap juntos.
Gap - espaço entre os elementos.

// Propriedades dos items
Flex basis - ajusta a largura.
Flex grow - o crescimento do item dentro do container em relação aos espaços vazios.
Flex shrink - o encolhimento do item dentro do container.
Flex - shorthand para o grow, shrink e basis. (nessa ordem)